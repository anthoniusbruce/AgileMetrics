@page "/"

<PageTitle>Agile Metrics</PageTitle>

@using AdoAnalysisServerApis
@using AgileMetricsServer.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IAdoAnalysisService AdoService

<h1>Working Toward Predictability</h1>

A consistent process leads to predictability
<br />
<br />

<body>
    <EditForm Model="@settingsModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
        <h3>Token settings</h3>
        <label>
            ADO Token for Org:
            <InputText id="token" @bind-Value="settingsModel.AdoToken" />
        </label>
        <br />
        <button type="submit">Submit</button>
        </p>
    </EditForm>

    @if (notAuthorized)
    {
        <p><em>Organization not authorized. Token is not valid. Maybe it is expired.</em></p>
    }

    @code {
        private SettingsModel settingsModel = new SettingsModel();
        private bool notAuthorized = false;

        protected override async Task OnInitializedAsync()
        {
            var token = await ProtectedLocalStore.GetAsync<string>(SettingsModel.adoTokenLocalStoreId);
            if (token.Success && !string.IsNullOrWhiteSpace(token.Value))
            {
                settingsModel.AdoToken = SettingsModel.ReverseToken(token.Value);
            }
        }

        private async Task HandleValidSubmit()
        {
            notAuthorized = false;
            if (!string.IsNullOrWhiteSpace(settingsModel.AdoToken))
            {
                var result = await AdoService.GetMetadata(settingsModel.AdoToken);
                if (result.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    notAuthorized = true;
                    return;
                }
            }

            if (settingsModel.AdoToken != null)
                await ProtectedLocalStore.SetAsync(SettingsModel.adoTokenLocalStoreId,
                SettingsModel.ReverseToken(settingsModel.AdoToken));
        }
    }
</body>
