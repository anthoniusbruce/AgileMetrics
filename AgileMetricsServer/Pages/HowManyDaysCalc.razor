@page "/howmanydays"

<PageTitle>How Many Days?</PageTitle>

@using AdoAnalysisServerApis
@using AgileMetricsRules
@using AgileMetricsServer.Models
@using AgileMetricsServer.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Caching.Memory

@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IAdoAnalysisService AdoService
@inject IMemoryCache InMemoryCache

<h1>How Many Days?</h1>

<body>
    <EditForm Model="@adoTeamDateUnitAndSims" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label>
                ADO Team:
                <InputText id="areapath" @bind-Value="adoTeamDateUnitAndSims.AdoTeam" />
            </label>
            <label>
                Work Item Type:
                <InputSelect @bind-Value="adoTeamDateUnitAndSims.WorkItemType">
                    <option value="">Select...</option>
                    <option value="@AdoAnalysisService.WorkItemTypeUserStory">User Story</option>
                    <option value="@AdoAnalysisService.WorkItemTypeBug">Bug</option>
                    <option value="@AdoAnalysisService.WorkItemTypeUserStoryAndBug">User Story and Bug</option>
                </InputSelect>
            </label>
            <label>
                From:
                <InputDate id="fromdate" @bind-Value="adoTeamDateUnitAndSims.StartingDate" />
            </label>
            <label>
                To:
                <InputDate id="todate" @bind-Value="adoTeamDateUnitAndSims.EndingDate" />
            </label>
            <br />
            <label>
                Number of Stories:
                <InputNumber id="unit" @bind-Value="adoTeamDateUnitAndSims.Unit" />
            </label>
            <label>
                Number of Simulations:
                <InputNumber id="simulations" @bind-Value="adoTeamDateUnitAndSims.Simulations" />
            </label>
            <button type="submit">Submit</button>
        </p>

    </EditForm>

    @if (!dataFetched)
    {
        <p><em>Choose values...</em></p>
    }
    else if (string.IsNullOrWhiteSpace(adoToken))
    {
        <p><em>ADO token is not set on the Home page</em></p>
    }
    else if (notAuthorized)
    {
        <p><em>Not authorized. Token is not valid. Maybe it is expired.</em></p>
    }
    else if (badRequest)
    {
        <p><em>Bad Request. Check that your entries do not have bad data.</em></p>
    }
    else if (throughputsJson == null || points == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <HowManyDaysChart Id="How Many Days" Data="@points" Percentiles="@percentiles" Title="How Many Days?"
            QueryDetails="@adoTeamDateUnitAndSims">
        </HowManyDaysChart>
    }

    @code {
        private ThroughputJsonRecord? throughputsJson;
        private SortedDictionary<int, int>? points;
        Percentiles? percentiles;
        private SimulationsDataModel adoTeamDateUnitAndSims = new SimulationsDataModel();
        private bool dataFetched = false;
        private bool shouldRender = true;
        private bool notAuthorized = false;
        private bool badRequest = false;
        private string? adoToken;
        private const string adoOrgLocalStoreId = "hmd-adoOrg";
        private const string adoTeamLocalStoreId = "hmd-adoteam";
        private const string workItemTypeLocalStoreId = "hmd-workitemtype";
        private const string simulationsLocalStoreId = "hmd-simulations";
        private const string startingDateSessionStoreId = "hmd-startingdate";
        private const string endingDateSessionStoreId = "hmd-endingdate";
        private const string howManyStoriesSessionStoreId = "hmd-howmanystories";

        protected override async Task OnInitializedAsync()
        {
            var tokenCookie = await ProtectedLocalStore.GetAsync<string>(SettingsModel.adoTokenLocalStoreId);
            if (tokenCookie.Success && !string.IsNullOrWhiteSpace(tokenCookie.Value))
            {
                adoToken = SettingsModel.ReverseToken(tokenCookie.Value);
            }

            var adoTeam = await ProtectedLocalStore.GetAsync<string>(adoTeamLocalStoreId);
            if (adoTeam.Success)
            {
                adoTeamDateUnitAndSims.AdoTeam = adoTeam.Value;
            }
            var workItemType = await ProtectedLocalStore.GetAsync<string>(workItemTypeLocalStoreId);
            if (workItemType.Success)
            {
                adoTeamDateUnitAndSims.WorkItemType = workItemType.Value;
            }
            var simulations = await ProtectedLocalStore.GetAsync<int>(simulationsLocalStoreId);
            if (simulations.Success)
            {
                adoTeamDateUnitAndSims.Simulations = simulations.Value;
            }
            var startingDate = await ProtectedSessionStore.GetAsync<DateTime>(startingDateSessionStoreId);
            if (startingDate.Success)
            {
                adoTeamDateUnitAndSims.StartingDate = startingDate.Value;
            }
            var endingDate = await ProtectedSessionStore.GetAsync<DateTime>(endingDateSessionStoreId);
            if (endingDate.Success)
            {
                adoTeamDateUnitAndSims.EndingDate = endingDate.Value;
            }
            var howManyStories = await ProtectedSessionStore.GetAsync<int>(howManyStoriesSessionStoreId);
            if (howManyStories.Success)
            {
                adoTeamDateUnitAndSims.Unit = howManyStories.Value;
            }

            await GatherData();
        }

        protected override bool ShouldRender()
        {
            var render = shouldRender;
            if (points != null)
                shouldRender = false;
            return render;
        }

        private async Task HandleValidSubmit()
        {
            await GatherData();
        }

        private async Task GatherData()
        {
            if (adoTeamDateUnitAndSims.AdoTeam == null || adoTeamDateUnitAndSims.StartingDate == null ||
            adoTeamDateUnitAndSims.Unit == null || adoTeamDateUnitAndSims.Simulations == null ||
            adoTeamDateUnitAndSims.EndingDate == null || string.IsNullOrWhiteSpace(adoTeamDateUnitAndSims.WorkItemType))
                return;

            throughputsJson = null;
            points = null;
            percentiles = null;
            shouldRender = true;
            notAuthorized = false;
            badRequest = false;

            dataFetched = true;

            if (!string.IsNullOrWhiteSpace(adoToken))
            {
                throughputsJson = await GetThroughputData(adoTeamDateUnitAndSims.WorkItemType,
                adoTeamDateUnitAndSims.StartingDate.Value, adoTeamDateUnitAndSims.EndingDate.Value, adoTeamDateUnitAndSims.AdoTeam,
                adoToken);
                if (throughputsJson == null)
                    return;
                if (throughputsJson.NotAuthorized)
                {
                    notAuthorized = true;
                }
                else if (throughputsJson.BadRequest)
                {
                    badRequest = true;
                }
                else
                {
                    points = await SimulationOfHowManyDaysForGivenNumberOfItemsAsync(throughputsJson,
                    adoTeamDateUnitAndSims.WorkItemType, adoTeamDateUnitAndSims.StartingDate.Value,
                    adoTeamDateUnitAndSims.EndingDate.Value, adoTeamDateUnitAndSims.AdoTeam, adoTeamDateUnitAndSims.Simulations.Value,
                    adoTeamDateUnitAndSims.Unit.Value);
                    percentiles = AgileMetricsRules.Simulations.CalculatePercentilesForHowManyDays(points);
                }

                await ProtectedLocalStore.SetAsync(adoTeamLocalStoreId, adoTeamDateUnitAndSims.AdoTeam);
                await ProtectedLocalStore.SetAsync(workItemTypeLocalStoreId, adoTeamDateUnitAndSims.WorkItemType);
                await ProtectedLocalStore.SetAsync(simulationsLocalStoreId, adoTeamDateUnitAndSims.Simulations);
                await ProtectedSessionStore.SetAsync(startingDateSessionStoreId, adoTeamDateUnitAndSims.StartingDate);
                await ProtectedSessionStore.SetAsync(endingDateSessionStoreId, adoTeamDateUnitAndSims.EndingDate);
                await ProtectedSessionStore.SetAsync(howManyStoriesSessionStoreId, adoTeamDateUnitAndSims.Unit);
            }
        }

        private async Task<SortedDictionary<int, int>>
        SimulationOfHowManyDaysForGivenNumberOfItemsAsync(ThroughputJsonRecord throughputsJson, string workItemType,
        DateTime startingDate, DateTime endingDate, string adoTeam, int simulations, int stories)
        {
            var cacheKey = string.Format("{0}\n{1}\n{2}\n{3}\n{4}\n{5}\n{6}\n{7}\n", "hmd", workItemType, startingDate,
            endingDate, adoTeam, simulations, stories, string.Empty);

            SortedDictionary<int, int>? simulationCache;
            var cached = InMemoryCache.TryGetValue(cacheKey, out simulationCache);
            if (!cached || simulationCache == null)
            {
                var throughputs = AgileMetricsRules.Throughput.CalculateThroughputPoints(throughputsJson, startingDate,
                DateTime.Now.Date);
                simulationCache = await AgileMetricsRules.Simulations.SimulationOfHowManyDaysForGivenNumberOfItemsAsync(simulations,
                throughputs, stories);
            }

            if (!cached && simulationCache != null && simulations >= 10000)
            {
                var cacheEntryOptions = new MemoryCacheEntryOptions();
                cacheEntryOptions.AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddHours(1));
                InMemoryCache.Set(cacheKey, simulationCache, cacheEntryOptions);
            }

            return simulationCache ?? new SortedDictionary<int, int>();
        }

        private async Task<ThroughputJsonRecord?> GetThroughputData(string workItemType, DateTime startingDate, DateTime
        endingDate, string adoTeam, string token)
        {
            var cacheKey = string.Format("{0}\n{1}\n{2}\n{3}\n{4}\n{5}\n", "hmd", workItemType, startingDate, endingDate,
            adoTeam, string.Empty);

            ThroughputJsonRecord? throughputCache;
            var cached = InMemoryCache.TryGetValue(cacheKey, out throughputCache);
            if (!cached || throughputCache == null)
                throughputCache = await AdoService.GetThroughputData(workItemType, startingDate, endingDate, adoTeam, token);

            if (!cached && throughputCache != null && !throughputCache.NotAuthorized)
            {
                var cachedEntryOptions = new MemoryCacheEntryOptions();
                cachedEntryOptions.AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddDays(1).Date);
                InMemoryCache.Set(cacheKey, throughputCache, cachedEntryOptions);
            }

            return throughputCache;
        }
    }
</body>
