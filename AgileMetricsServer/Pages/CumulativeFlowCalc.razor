@page "/cumulativeflow"

<PageTitle>Cumulative Flow</PageTitle>

@using AdoAnalysisServerApis
@using AgileMetricsRules
@using AgileMetricsServer.Models
@using AgileMetricsServer.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Caching.Memory

@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IAdoAnalysisService AdoService
@inject IMemoryCache InMemoryCache

<h1>Cumulative Flow Diagram</h1>
<i>Wait for it... this one takes a while to load</i>

<body>
    <EditForm Model="@cumulativeFlowDataModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label>
                ADO Team:
                <InputText id="adoteam" @bind-Value="cumulativeFlowDataModel.AdoTeam" />
            </label>
            <label>
                How many months?:
                <InputSelect @bind-Value="cumulativeFlowDataModel.TimeSpan">
                    <option value="">Select...</option>
                    <option value="@AdoAnalysisService.OneMonth">@AdoAnalysisService.OneMonth</option>
                    <option value="@AdoAnalysisService.TwoMonths">@AdoAnalysisService.TwoMonths</option>
                    <option value="@AdoAnalysisService.ThreeMonths">@AdoAnalysisService.ThreeMonths</option>
                </InputSelect>
            </label>
            <button type="submit">Submit</button>
        </p>

    </EditForm>

    @if (!dataFetched)
    {
        <p><em>Choose values...</em></p>
    }
    else if (string.IsNullOrWhiteSpace(adoToken))
    {
        <p><em>ADO token is not set on the Home page</em></p>
    }
    else if (notAuthorized)
    {
        <p><em>Not authorized. Token is not valid. Maybe it is expired.</em></p>
    }
    else if (badRequest)
    {
        <p><em>Bad Request. Check that your entries do not have bad data.</em></p>
    }
    else if (cumulativeFlowJson == null || columnsJson == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <CumulativeFlowDiagram Id="Cumulative Flow Diagram" Data="@aggregatedCfd" Columns="@columnOrder"
            Title="Cumulative Flow Diagram" QueryDetails="@cumulativeFlowDataModel">
        </CumulativeFlowDiagram>
    }

    @code {
        private CumulativeFlowJsonRecord? cumulativeFlowJson;
        private ColumnJsonRecord? columnsJson;
        private Dictionary<DateTime, Dictionary<string, int>>? aggregatedCfd;
        private List<string>? columnOrder;
        private CumulativeFlowDataModel cumulativeFlowDataModel = new CumulativeFlowDataModel();
        private string? adoToken;
        private bool shouldRender = true;
        private bool dataFetched = false;
        private bool notAuthorized = false;
        private bool badRequest = false;
        private const string adoOrgLocalStoreId = "cfd-adoorg";
        private const string adoTeamLocalStoreId = "cfd-adoteam";
        private const string timeSpanSessionStoreId = "cfd-timespan";

        protected override async Task OnInitializedAsync()
        {
            var tokenCookie = await ProtectedLocalStore.GetAsync<string>(SettingsModel.adoTokenLocalStoreId);
            if (tokenCookie.Success && !string.IsNullOrWhiteSpace(tokenCookie.Value))
            {
                adoToken = SettingsModel.ReverseToken(tokenCookie.Value);
            }

            var adoTeam = await ProtectedLocalStore.GetAsync<string>(adoTeamLocalStoreId);
            if (adoTeam.Success)
            {
                cumulativeFlowDataModel.AdoTeam = adoTeam.Value;
            }
            var timeSpan = await ProtectedSessionStore.GetAsync<string>(timeSpanSessionStoreId);
            if (timeSpan.Success)
            {
                cumulativeFlowDataModel.TimeSpan = timeSpan.Value;
            }

            await GatherData();
        }

        protected override bool ShouldRender()
        {
            var render = shouldRender;
            if (cumulativeFlowJson != null)
                shouldRender = false;
            return render;
        }

        private async Task HandleValidSubmit()
        {
            await GatherData();
        }

        private async Task GatherData()
        {
            if (cumulativeFlowDataModel.AdoTeam == null || string.IsNullOrWhiteSpace(cumulativeFlowDataModel.TimeSpan))
                return;

            cumulativeFlowJson = null;
            columnsJson = null;
            aggregatedCfd = null;
            columnOrder = null;
            shouldRender = true;
            notAuthorized = false;
            badRequest = false;

            dataFetched = true;

            if (!string.IsNullOrWhiteSpace(adoToken))
            {
                columnsJson = await GetColumnData(adoToken, cumulativeFlowDataModel.AdoTeam);
                if (columnsJson == null)
                    return;
                if (columnsJson.NotAuthorized)
                    notAuthorized = true;
                else if (columnsJson.BadRequest)
                    badRequest = true;
                else
                {
                    cumulativeFlowJson = await GetCumulativeFlowData(adoToken, cumulativeFlowDataModel.AdoTeam,
                    cumulativeFlowDataModel.TimeSpan);
                    if (cumulativeFlowJson == null)
                    {
                        columnsJson = null;
                        return;
                    }
                    if (cumulativeFlowJson.NotAuthorized)
                    {
                        columnsJson.Value = new List<ColumnJsonRec>();
                        columnsJson.NotAuthorized = true;
                        notAuthorized = true;
                    }
                    else if (cumulativeFlowJson.BadRequest)
                    {
                        columnsJson.Value = new List<ColumnJsonRec>();
                        columnsJson.BadRequest = true;
                        badRequest = true;
                    }
                    else
                    {
                        var columnMap = CumulativeFlow.CreateColumnMap(columnsJson);
                        columnOrder = CumulativeFlow.ColumnOrder(columnMap);
                        var arrangedCfd = CumulativeFlow.ArrangeCumulativeFlowData(cumulativeFlowJson, columnMap);

                        aggregatedCfd = CumulativeFlow.AggregateCumulativeFlowData(arrangedCfd);
                    }
                }

                await ProtectedLocalStore.SetAsync(adoTeamLocalStoreId, cumulativeFlowDataModel.AdoTeam);
                await ProtectedSessionStore.SetAsync(timeSpanSessionStoreId, cumulativeFlowDataModel.TimeSpan);
            }
        }

        private async Task<ColumnJsonRecord?> GetColumnData(string token, string team)
        {
            var cacheKey = string.Format("{0}\n{1}\n", "cfd", team);

            ColumnJsonRecord? columnCache;
            var cached = InMemoryCache.TryGetValue(cacheKey, out columnCache);
            if (!cached || columnCache == null)
                columnCache = await AdoService.GetColumnData(token, team);

            if (!cached && columnCache != null && !columnCache.NotAuthorized)
            {
                var cacheEntryOptions = new MemoryCacheEntryOptions();
                cacheEntryOptions.AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddDays(1).Date);
                InMemoryCache.Set(cacheKey, columnCache, cacheEntryOptions);
            }

            return columnCache;
        }

        private async Task<CumulativeFlowJsonRecord?> GetCumulativeFlowData(string token, string team, string timeSpan)
        {
            var cacheKey = string.Format("{0}\n{1}\n{2}\n", "cfd", team, timeSpan);

            CumulativeFlowJsonRecord? cfdCache;
            var cached = InMemoryCache.TryGetValue(cacheKey, out cfdCache);
            if (!cached || cfdCache == null)
                cfdCache = await AdoService.GetCumulativeFlowData(token, team, timeSpan);

            if (!cached && cfdCache != null && !cfdCache.NotAuthorized)
            {
                var cacheEntryOptions = new MemoryCacheEntryOptions();
                cacheEntryOptions.AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddDays(1).Date);
                InMemoryCache.Set(cacheKey, cfdCache, cacheEntryOptions);
            }

            return cfdCache;
        }
    }
</body>
